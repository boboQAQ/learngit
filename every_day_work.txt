当前计划————了解ci框架，熟悉Git操作，了解ython的基本语法————了解数据库Redis。mongo的一些接口。
完成情况————Git是一个免费的分布式版本控制器,控制的是修改，而不是文件。
了解并实际重复操作了以下命令。
git init把一个目录变成Git可管理的仓库
git add添加文件到版本库/暂存区，
git status查看当前路径状态，可以知道有没有文件被修改，
git diff查看修改内容,git diff HEAD -- <FILE>或git diff <file>等格式，
git commit -m "***" 提交，并且-m后的引号内容是本次提交说明，
git log 查看最近提交日志
git reset --hard 【commit-id】回溯版本，通过HEAD指针指向当前版本，但是不知道 --hard的作用。
git reflog记录每次命令方便回溯版本
对文件的的修改和删除
git checkout -- <file>丢弃工作区的修改，回到该文件上一次git commit或则git add状态，侧重点在工作区的修改而不是暂存区。
git reset HEAD <file>将add/rm到暂存区的文件退回到工作区，然后再通过checkout丢弃修改即可。
个人认知，git checkout 用以将工作区修改丢弃，而git reset HEAD <FILE>则是先将add到暂存区的退回工作区，再丢弃修改 如果修改已经提交到版本库，只能考虑版本回退
删除文件可以先外部删除，可以通过git status查看到状态，然后使用git rm <file>删除并提交本次修改


远程仓库功能：使用的GitHub上手练习，创建ssh-key后连接上了自己的GitHub账号——————成功将本机git仓库关联到GitHub并将master分支所有内容推送去。
关联一个远程库：git remote add origin <address>
关联后，使用git push -u origin master第一次推送master分支所有内容，此后只需git push origin master.
clone远程仓库到本地git clone <address>   成功从远程仓库clone到本地库
查看远程库的信息，用git remote
或者，用git remote -v显示更详细的信息


分支创建与合并：
结果————成功用git实现了分支的创建与合并。理解：分支上的修改提交不会影响其他分支，只有在合并之后，分支上的修改才会体现在master上，在合并之后可以删除之前创建的分支。
git checkout -b <branch-name>创建并切换到这个分支，git checkout <branch-name>切换分支，git branch <branch-name>创建一个分支。
git branch 查看当前分支状况，*标记的分支为当前分支
git merge <branch-name>将<branch-name>分支合并到当前分支
git branch -d <branch-name> 合并之后可以用此命令删除分支
通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。

如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
使用 no-ff可以保留历史合并信息


分支冲突：不能快速合并的话，需要自己手动合并之后，add，commit，可以使用git log 带参数查看分支合并情况
git log --graph --pretty=oneline --abbrev-commit

BUG分支：可以先使用git stash保存工作区，再创建分支去修改bug，修改结束后合并到master后删除bug分支再回到之前的分支，
		可以使用git stash apply恢复，但是未删除stash内容。
		也可以使用git stash pop恢复的同时删除stash。
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。



多人协作的工作模式通常是这样：

首先，可以试图用git push origin <branch-name>推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。

rebase操作可以把本地未push的分叉提交历史整理成直线；

rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。



取得进步————
不足部分及改善办法————
存在困难和需要获得支持————无
